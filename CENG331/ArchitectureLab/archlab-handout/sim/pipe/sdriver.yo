                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70001000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f33103710500000000 |     irmovq $0x5710331, %rbx
0x03c: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x046: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x050: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x05a: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x064: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x06e: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x078: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x082: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x08c: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x096: 80a000000000000000   | 	call abscopy		 
0x09f: 00                   | 	halt			# should halt with abs sum in %rax
0x0a0:                      | StartFun:
                            | #/* $begin abscopy-ys */
                            | ##################################################################
                            | # abscopy.ys - copy the absolute values of a src block of n words to dst.
                            | # Return the sum of copied (absolute) values.
                            | #
                            | # Include your name and ID here.
                            | # Describe how and why you modified the baseline code.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = n
0x0a0:                      | abscopy:
                            | ##################################################################
                            | # You can modify this portion
0x0a0: 30fb0100000000000000 |         irmovq $1, %r11         # %r11 = 1, will be used inside the loop
0x0aa: 30f80800000000000000 |         irmovq $8, %r8          # %r8 = 8, will be used inside the loop
                            |         # Loop header
0x0b4: 6300                 |         xorq %rax,%rax          # sum = 0;
0x0b6: 6222                 |         andq %rdx,%rdx          # n <= 0?
0x0b8: 71fd00000000000000   |         jle Done                # if so, goto Done:
                            | 
0x0c1:                      | Loop:   
0x0c1: 50a70000000000000000 |         mrmovq (%rdi), %r10     # read val from src...
0x0cb: 62aa                 |         andq %r10, %r10         # val >= 0?
0x0cd: 75e000000000000000   |         jge Positive            # if so, skip negating
0x0d6: d0fa0000000000000000 |         isubq $0, %r10          # r10 = -val
0x0e0:                      | Positive:
0x0e0: 60a0                 |         addq %r10, %rax         # sum += absval   
0x0e2: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
0x0ec: 61b2                 |         subq %r11, %rdx         # n--
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x0ee: 6086                 |         addq %r8, %rsi          # dst++
0x0f0: 6087                 |         addq %r8, %rdi          # src++
0x0f2: 6222                 |         andq %rdx, %rdx         # n > 0?
0x0f4: 76c100000000000000   |         jg Loop                 # if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0fd:                      | Done:
0x0fd: 90                   |         ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0fe:                      | End:
                            | #/* $end abscopy-ys */
0x0fe:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x100:                      | 	.align 8
0x100:                      | src:
0x100: ffffffffffffffff     | 	.quad -1
0x108: feffffffffffffff     | 	.quad -2
0x110: 0300000000000000     | 	.quad 3
0x118: 0400000000000000     | 	.quad 4
0x120: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x130:                      | 	.align 16
0x130:                      | Predest:
0x130: fadebc0000000000     | 	.quad 0xbcdefa
0x138:                      | dest:
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158:                      | Postdest:
0x158: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x160:                      | .align 8
                            | # Run time stack
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
                            | 
0x1e0:                      | Stack:
