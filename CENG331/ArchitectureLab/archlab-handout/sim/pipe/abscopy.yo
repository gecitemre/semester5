                            | #/* $begin abscopy-ys */
                            | ##################################################################
                            | # abscopy.ys - copy the absolute values of a src block of n words to dst.
                            | # Return the sum of copied (absolute) values.
                            | #
                            | # name: Emre Ge√ßit
                            | # id: 2521581
                            | # I have tried different configurations for loop count.
                            | # Best performance is achieved with 5 loops.
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = n
0x000:                      | abscopy:
                            | ##################################################################
                            | # You can modify this portion
0x000: 30fb0100000000000000 |         irmovq $1, %r11         # %r11 = 1, will be used inside the loop
0x00a: 30f80800000000000000 |         irmovq $8, %r8          # %r8 = 8, will be used inside the loop
0x014: 30f93000000000000000 |         irmovq $48, %r9
0x01e: 30f10600000000000000 | irmovq $6, %rcx
                            |         # Loop header
0x028: 6300                 |         xorq %rax,%rax          # sum = 0;
0x02a:                      | Check:
0x02a: 6112                 |         subq %rcx, %rdx         # %rdx -= %rcx
0x02c: 724401000000000000   |         jl Remaining            # if n < AC, goto Remaining
                            | 
0x035:                      | Loop1:
0x035: 50a70000000000000000 |         mrmovq 0(%rdi), %r10     # read val from src...
0x03f: 62aa                 |         andq %r10, %r10         # val >= 0?
0x041: 755400000000000000   |         jge Positive1           # if so, skip negating
0x04a: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x054:                      | Positive1:
0x054: 60a0                 |         addq %r10, %rax         # sum += absval   
0x056: 40a60000000000000000 |         rmmovq %r10, 0(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x060:                      | Loop2:
0x060: 50a70800000000000000 |         mrmovq 8(%rdi), %r10     # read val from src...
0x06a: 62aa                 |         andq %r10, %r10         # val >= 0?
0x06c: 757f00000000000000   |         jge Positive2           # if so, skip negating
0x075: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x07f:                      | Positive2:
0x07f: 60a0                 |         addq %r10, %rax         # sum += absval   
0x081: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x08b:                      | Loop3:
0x08b: 50a71000000000000000 |         mrmovq 16(%rdi), %r10     # read val from src...
0x095: 62aa                 |         andq %r10, %r10         # val >= 0?
0x097: 75aa00000000000000   |         jge Positive3           # if so, skip negating
0x0a0: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x0aa:                      | Positive3:
0x0aa: 60a0                 |         addq %r10, %rax         # sum += absval   
0x0ac: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x0b6:                      | Loop4:
0x0b6: 50a71800000000000000 |         mrmovq 24(%rdi), %r10     # read val from src...
0x0c0: 62aa                 |         andq %r10, %r10         # val >= 0?
0x0c2: 75d500000000000000   |         jge Positive4           # if so, skip negating
0x0cb: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x0d5:                      | Positive4:
0x0d5: 60a0                 |         addq %r10, %rax         # sum += absval   
0x0d7: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x0e1:                      | Loop5:
0x0e1: 50a72000000000000000 |         mrmovq 32(%rdi), %r10     # read val from src...
0x0eb: 62aa                 |         andq %r10, %r10         # val >= 0?
0x0ed: 750001000000000000   |         jge Positive5           # if so, skip negating
0x0f6: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x100:                      | Positive5:
0x100: 60a0                 |         addq %r10, %rax         # sum += absval   
0x102: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x10c:                      | Loop6:
0x10c: 50a72800000000000000 |         mrmovq 40(%rdi), %r10     # read val from src...
0x116: 62aa                 |         andq %r10, %r10         # val >= 0?
0x118: 752b01000000000000   |         jge Positive6           # if so, skip negating
0x121: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x12b:                      | Positive6:
0x12b: 60a0                 |         addq %r10, %rax         # sum += absval   
0x12d: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
                            | 
0x137: 6097                 |         addq %r9, %rdi          # src += AC*8
0x139: 6096                 |         addq %r9, %rsi          # dst += AC*8
0x13b: 702a00000000000000   |         jmp Check               # goto Check
                            | 
0x144:                      | Remaining:
0x144: 6012                 |         addq %rcx, %rdx         # %rdx += %rcx
0x146:                      | Loop:
0x146: 738b01000000000000   |         je Done                # if n == 0, goto Done
0x14f: 50a70000000000000000 |         mrmovq (%rdi), %r10     # read val from src...
0x159: 62aa                 |         andq %r10, %r10         # val >= 0?
0x15b: 756e01000000000000   |         jge Positive            # if so, skip negating
0x164: d0fa0000000000000000 |         isubq $0, %r10          # Use isubq to negate val
0x16e:                      | Positive:
0x16e: 60a0                 |         addq %r10, %rax         # sum += absval   
0x170: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
                            |         # irmovq $1, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r11 is used.
                            |         # irmovq $8, %r10 | This costs an extra cycle each loop and unnecessary. Instead dedicated register %r8 is used.
0x17a: 6086                 |         addq %r8, %rsi          # dst++
0x17c: 6087                 |         addq %r8, %rdi          # src++
0x17e: 61b2                 |         subq %r11, %rdx         # n--
0x180: 6222                 |         andq %rdx, %rdx         # n > 0?
0x182: 764601000000000000   |         jg Loop                 # if so, goto Loop:
                            |         
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x18b:                      | Done:
0x18b: 90                   |         ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x18c:                      | End:
                            | #/* $end abscopy-ys */
