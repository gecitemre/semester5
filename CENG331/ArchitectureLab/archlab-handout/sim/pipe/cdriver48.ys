#######################################################################
# Test for copying block of size 48;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $48, %rdx		# src and dst have 48 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
    # corrupt all the unused registers to prevent assumptions
    irmovq $0x5710331, %rax
    irmovq $0x5710331, %rbx
    irmovq $0x5710331, %rcx
    irmovq $0x5710331, %rbp
    irmovq $0x5710331, %r8
    irmovq $0x5710331, %r9
    irmovq $0x5710331, %r10
    irmovq $0x5710331, %r11
    irmovq $0x5710331, %r12
    irmovq $0x5710331, %r13
    irmovq $0x5710331, %r14
	call abscopy		 
	call check	        # Call checker code
	halt                # should halt with 0xaaaa in %rax
StartFun:
#/* $begin abscopy-ys */
##################################################################
# abscopy.ys - copy the absolute values of a src block of n words to dst.
# Return the sum of copied (absolute) values.
#
# name: Emre GeÃ§it
# id: 2521581

# I have tried different configurations for loop count.
# Best performance is achieved with 4 loops.

# I used the following three lines in order to improve performance during taking the absolute value.
#        xorq %r12, %r12         # %r12 = 0
#        subq %r10, %r12         # %r12 = -%r10
#        cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10 

# I removed and reordered some instructions in order to improve performance.

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = n
abscopy:
##################################################################
# You can modify this portion

        irmovq $6, %r8          # %r8 = 2, will be used inside the loop
        irmovq $48, %r14          # %r14 = 16, will be used inside the loop
        # Loop header
        xorq %rax,%rax          # sum = 0;
        subq %r8, %rdx         # n -= 2
        jl Remaining                # if n == 0, goto Done

Loop:
        mrmovq (%rdi), %r10     # read val from src...
        mrmovq 8(%rdi), %r11     # read val from src...
        mrmovq 16(%rdi), %rbp     # read val from src...
        xorq %r12, %r12         # %r12 = 0
        xorq %r13, %r13         # %r12 = 0
        xorq %rcx, %rcx         # %r12 = 0
        subq %r10, %r12         # %r12 = -%r10
        cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10
        subq %r11, %r13         # %r12 = -%r10
        cmovg %r13, %r11        # if %r12 > 0, %r10 = -%r10
        subq %rbp, %rcx         # %r12 = -%r10
        cmovg %rcx, %rbp        # if %r12 > 0, %r10 = -%r10
        addq %r10, %rax         # sum += absval
        addq %r11, %rax         # sum += absval
        addq %rbp, %rax         # sum += absval
        rmmovq %r10, (%rsi)     # ...and store it to dst
        rmmovq %r11, 8(%rsi)     # ...and store it to dst
        rmmovq %rbp, 16(%rsi)     # ...and store it to dst

        mrmovq 24(%rdi), %r10     # read val from src...
        mrmovq 32(%rdi), %r11     # read val from src...
        mrmovq 40(%rdi), %rbp     # read val from src...
        xorq %r12, %r12         # %r12 = 0
        xorq %r13, %r13         # %r12 = 0
        xorq %rcx, %rcx         # %r12 = 0
        subq %r10, %r12         # %r12 = -%r10
        cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10
        subq %r11, %r13         # %r12 = -%r10
        cmovg %r13, %r11        # if %r12 > 0, %r10 = -%r10
        subq %rbp, %rcx         # %r12 = -%r10
        cmovg %rcx, %rbp        # if %r12 > 0, %r10 = -%r10
        addq %r10, %rax         # sum += absval
        addq %r11, %rax         # sum += absval
        addq %rbp, %rax         # sum += absval
        rmmovq %r10, 24(%rsi)     # ...and store it to dst
        rmmovq %r11, 32(%rsi)     # ...and store it to dst
        rmmovq %rbp, 40(%rsi)     # ...and store it to dst
        
        addq %r14, %rsi          # dst++
        addq %r14, %rdi          # src++
        subq %r8, %rdx         # n -= 2
        jge Loop                 # if n > 0, goto Loop
        
Remaining:
        addq %r8, %rdx         # n += 2
        irmovq $1, %r8          # %r8 = 1, will be used inside the loop
        irmovq $8, %r14          # %r14 = 8, will be used inside the loop
        je Done                # if n == 0, goto Done
Loop2:
        mrmovq (%rdi), %r10     # read val from src...
        xorq %r12, %r12         # %r12 = 0
        subq %r10, %r12         # %r12 = -%r10
        cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10
        addq %r10, %rax         # sum += absval
        rmmovq %r10, (%rsi)     # ...and store it to dst
        addq %r14, %rsi          # dst++
        addq %r14, %rdi          # src++
        subq %r8, %rdx         # n--
        jg Loop2                 # if n > 0, goto Loop2

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end abscopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 1176.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination in reverse.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $1176,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src, %rbx  # Pointer to next source location
	irmovq $48,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rbx),%rsi #src
	andq %rsi, %rsi    # val >= 0?
    jge posit       # if so, skip negating
    rrmovq %rsi, %rax       # temporary move
    xorq %rsi, %rsi         # zero rsi
    subq %rax, %rsi         # negation achieved!
posit:
    mrmovq (%rdx),%rax #dest
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # count--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad 6
	.quad 7
	.quad -8
	.quad -9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad -14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad -19
	.quad 20
	.quad 21
	.quad -22
	.quad 23
	.quad 24
	.quad -25
	.quad -26
	.quad -27
	.quad -28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad -34
	.quad -35
	.quad -36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad -41
	.quad 42
	.quad 43
	.quad -44
	.quad -45
	.quad -46
	.quad -47
	.quad -48
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
