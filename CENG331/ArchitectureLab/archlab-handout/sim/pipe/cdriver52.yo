                            | #######################################################################
                            | # Test for copying block of size 52;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23400000000000000 | 	irmovq $52, %rdx		# src and dst have 52 elements
0x014: 30f6a804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f802000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f33103710500000000 |     irmovq $0x5710331, %rbx
0x03c: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x046: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x050: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x05a: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x064: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x06e: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x078: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x082: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x08c: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x096: 80a900000000000000   | 	call abscopy		 
0x09f: 808001000000000000   | 	call check	        # Call checker code
0x0a8: 00                   | 	halt                # should halt with 0xaaaa in %rax
0x0a9:                      | StartFun:
                            | #/* $begin abscopy-ys */
                            | ##################################################################
                            | # abscopy.ys - copy the absolute values of a src block of n words to dst.
                            | # Return the sum of copied (absolute) values.
                            | #
                            | # name: Emre GeÃ§it
                            | # id: 2521581
                            | 
                            | # I have tried different configurations for loop count.
                            | # Best performance is achieved with 4 loops.
                            | 
                            | # I used the following three lines in order to improve performance during taking the absolute value.
                            | #        xorq %r12, %r12         # %r12 = 0
                            | #        subq %r10, %r12         # %r12 = -%r10
                            | #        cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10 
                            | 
                            | # I removed and reordered some instructions in order to improve performance.
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = n
0x0a9:                      | abscopy:
                            | ##################################################################
                            | # You can modify this portion
                            | 
0x0a9: 30f80300000000000000 |         irmovq $3, %r8          # %r8 = 2, will be used inside the loop
0x0b3: 30fe1800000000000000 |         irmovq $24, %r14          # %r14 = 16, will be used inside the loop
                            |         # Loop header
0x0bd: 6300                 |         xorq %rax,%rax          # sum = 0;
0x0bf: 6182                 |         subq %r8, %rdx         # n -= 2
0x0c1: 722d01000000000000   |         jl Remaining                # if n == 0, goto Done
                            | 
0x0ca:                      | Loop:
0x0ca: 50a70000000000000000 |         mrmovq (%rdi), %r10     # read val from src...
0x0d4: 50b70800000000000000 |         mrmovq 8(%rdi), %r11     # read val from src...
0x0de: 50571000000000000000 |         mrmovq 16(%rdi), %rbp     # read val from src...
0x0e8: 63cc                 |         xorq %r12, %r12         # %r12 = 0
0x0ea: 63dd                 |         xorq %r13, %r13         # %r12 = 0
0x0ec: 6311                 |         xorq %rcx, %rcx         # %r12 = 0
0x0ee: 61ac                 |         subq %r10, %r12         # %r12 = -%r10
0x0f0: 26ca                 |         cmovg %r12, %r10        # if %r12 > 0, %r10 = -%r10
0x0f2: 61bd                 |         subq %r11, %r13         # %r12 = -%r10
0x0f4: 26db                 |         cmovg %r13, %r11        # if %r12 > 0, %r10 = -%r10
0x0f6: 6151                 |         subq %rbp, %rcx         # %r12 = -%r10
0x0f8: 2615                 |         cmovg %rcx, %rbp        # if %r12 > 0, %r10 = -%r10
0x0fa: 60a0                 |         addq %r10, %rax         # sum += absval
0x0fc: 60b0                 |         addq %r11, %rax         # sum += absval
0x0fe: 6050                 |         addq %rbp, %rax         # sum += absval
0x100: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
0x10a: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)     # ...and store it to dst
0x114: 40561000000000000000 |         rmmovq %rbp, 16(%rsi)     # ...and store it to dst
0x11e: 60e6                 |         addq %r14, %rsi          # dst++
0x120: 60e7                 |         addq %r14, %rdi          # src++
0x122: 6182                 |         subq %r8, %rdx         # n -= 2
0x124: 75ca00000000000000   |         jge Loop                 # if n > 0, goto Loop
                            | 
                            |         
0x12d:                      | Remaining:
0x12d: 6082                 |         addq %r8, %rdx         # n += 2
0x12f: 30f80100000000000000 |         irmovq $1, %r8          # %r8 = 1, will be used inside the loop
0x139: 30fe0800000000000000 |         irmovq $8, %r14          # %r14 = 8, will be used inside the loop
0x143: 737f01000000000000   |         je Done                # if n == 0, goto Done
0x14c:                      | Loop2:
0x14c: 50a70000000000000000 |         mrmovq (%rdi), %r10     # read val from src...
0x156: 20ac                 |         rrmovq %r10, %r12
0x158: d0fa0000000000000000 |         isubq $0, %r10
0x162: 22ca                 |         cmovl %r12, %r10
0x164: 60a0                 |         addq %r10, %rax         # sum += absval
0x166: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
0x170: 60e6                 |         addq %r14, %rsi          # dst++
0x172: 60e7                 |         addq %r14, %rdi          # src++
0x174: 6182                 |         subq %r8, %rdx         # n--
0x176: 764c01000000000000   |         jg Loop2                 # if n > 0, goto Loop2
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x17f:                      | Done:
0x17f: 90                   |         ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x180:                      | End:
                            | #/* $end abscopy-ys */
0x180:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1378.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination in reverse.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x180:                      | check:
                            | 	# Return value test
0x180: 30fa6205000000000000 | 	irmovq $1378,%r10
0x18a: 61a0                 | 	subq %r10,%rax
0x18c: 73a801000000000000   | 	je checkb
0x195: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x19f: 70f702000000000000   | 	jmp cdone
0x1a8:                      | checkb:
                            | 	# Code length check
0x1a8: 30f08001000000000000 | 	irmovq EndFun,%rax
0x1b2: 30f2a900000000000000 | 	irmovq StartFun,%rdx
0x1bc: 6120                 | 	subq %rdx,%rax
0x1be: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x1c8: 6102                 | 	subq %rax,%rdx
0x1ca: 75e601000000000000   | 	jge checkm
0x1d3: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x1dd: 70f702000000000000   | 	jmp cdone
0x1e6:                      | checkm:
0x1e6: 30f2a804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x1f0: 30f3f802000000000000 | 	irmovq src, %rbx  # Pointer to next source location
0x1fa: 30f73400000000000000 | 	irmovq $52,%rdi  # Count
0x204: 6277                 | 	andq %rdi,%rdi
0x206: 737502000000000000   | 	je checkpre         # Skip check if count = 0
0x20f:                      | mcloop:
0x20f: 50630000000000000000 | 	mrmovq (%rbx),%rsi #src
0x219: 6266                 | 	andq %rsi, %rsi    # val >= 0?
0x21b: 752a02000000000000   |     jge posit       # if so, skip negating
0x224: 2060                 |     rrmovq %rsi, %rax       # temporary move
0x226: 6366                 |     xorq %rsi, %rsi         # zero rsi
0x228: 6106                 |     subq %rax, %rsi         # negation achieved!
0x22a:                      | posit:
0x22a: 50020000000000000000 |     mrmovq (%rdx),%rax #dest
0x234: 6160                 | 	subq %rsi,%rax
0x236: 735202000000000000   | 	je  mok
0x23f: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x249: 70f702000000000000   | 	jmp cdone
0x252:                      | mok:
0x252: 30f00800000000000000 | 	irmovq $8,%rax
0x25c: 6002                 | 	addq %rax,%rdx	  # dest++
0x25e: 6003                 | 	addq %rax,%rbx    # src++
0x260: 30f00100000000000000 | 	irmovq $1,%rax
0x26a: 6107                 | 	subq %rax,%rdi    # count--
0x26c: 760f02000000000000   | 	jg mcloop
0x275:                      | checkpre:
                            | 	# Check for corruption
0x275: 30f2a004000000000000 | 	irmovq Predest,%rdx
0x27f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x289: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x293: 6120                 | 	subq %rdx,%rax
0x295: 73b102000000000000   | 	je checkpost
0x29e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x2a8: 70f702000000000000   | 	jmp cdone
0x2b1:                      | checkpost:
                            | 	# Check for corruption
0x2b1: 30f24806000000000000 | 	irmovq Postdest,%rdx
0x2bb: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x2c5: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x2cf: 6120                 | 	subq %rdx,%rax
0x2d1: 73ed02000000000000   | 	je checkok
0x2da: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x2e4: 70f702000000000000   | 	jmp cdone
0x2ed:                      | checkok:
                            | 	# Successful checks
0x2ed: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x2f7:                      | cdone:
0x2f7: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2f8:                      | 	.align 8
0x2f8:                      | src:
0x2f8: ffffffffffffffff     | 	.quad -1
0x300: 0200000000000000     | 	.quad 2
0x308: fdffffffffffffff     | 	.quad -3
0x310: 0400000000000000     | 	.quad 4
0x318: fbffffffffffffff     | 	.quad -5
0x320: faffffffffffffff     | 	.quad -6
0x328: f9ffffffffffffff     | 	.quad -7
0x330: f8ffffffffffffff     | 	.quad -8
0x338: 0900000000000000     | 	.quad 9
0x340: 0a00000000000000     | 	.quad 10
0x348: f5ffffffffffffff     | 	.quad -11
0x350: 0c00000000000000     | 	.quad 12
0x358: 0d00000000000000     | 	.quad 13
0x360: 0e00000000000000     | 	.quad 14
0x368: 0f00000000000000     | 	.quad 15
0x370: f0ffffffffffffff     | 	.quad -16
0x378: efffffffffffffff     | 	.quad -17
0x380: eeffffffffffffff     | 	.quad -18
0x388: 1300000000000000     | 	.quad 19
0x390: 1400000000000000     | 	.quad 20
0x398: 1500000000000000     | 	.quad 21
0x3a0: 1600000000000000     | 	.quad 22
0x3a8: 1700000000000000     | 	.quad 23
0x3b0: 1800000000000000     | 	.quad 24
0x3b8: e7ffffffffffffff     | 	.quad -25
0x3c0: e6ffffffffffffff     | 	.quad -26
0x3c8: 1b00000000000000     | 	.quad 27
0x3d0: e4ffffffffffffff     | 	.quad -28
0x3d8: e3ffffffffffffff     | 	.quad -29
0x3e0: 1e00000000000000     | 	.quad 30
0x3e8: 1f00000000000000     | 	.quad 31
0x3f0: 2000000000000000     | 	.quad 32
0x3f8: dfffffffffffffff     | 	.quad -33
0x400: deffffffffffffff     | 	.quad -34
0x408: 2300000000000000     | 	.quad 35
0x410: dcffffffffffffff     | 	.quad -36
0x418: 2500000000000000     | 	.quad 37
0x420: daffffffffffffff     | 	.quad -38
0x428: 2700000000000000     | 	.quad 39
0x430: 2800000000000000     | 	.quad 40
0x438: d7ffffffffffffff     | 	.quad -41
0x440: 2a00000000000000     | 	.quad 42
0x448: d5ffffffffffffff     | 	.quad -43
0x450: 2c00000000000000     | 	.quad 44
0x458: 2d00000000000000     | 	.quad 45
0x460: d2ffffffffffffff     | 	.quad -46
0x468: 2f00000000000000     | 	.quad 47
0x470: 3000000000000000     | 	.quad 48
0x478: 3100000000000000     | 	.quad 49
0x480: 3200000000000000     | 	.quad 50
0x488: cdffffffffffffff     | 	.quad -51
0x490: 3400000000000000     | 	.quad 52
0x498: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4a0:                      | 	.align 16
0x4a0:                      | Predest:
0x4a0: fadebc0000000000     | 	.quad 0xbcdefa
0x4a8:                      | dest:
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648:                      | Postdest:
0x648: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x650:                      | .align 8
                            | # Run time stack
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
                            | 
0x6d0:                      | Stack:
