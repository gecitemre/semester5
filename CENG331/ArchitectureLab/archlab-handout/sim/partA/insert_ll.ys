# Emre GeÃ§it
# 2521581

.pos 0
    irmovq stack, %rsp
    irmovq ele0, %rdi
    irmovq array, %rsi
    irmovq $0x999, %rdx # value
    call insert_ll
    halt

insert_ll:
    rmmovq %rdx, (%rsi)
    andq %rdi, %rdi
    je insert_head
    mrmovq (%rdi), %rcx # %rcx = head->value
    subq %rdx, %rcx # %rcx = head->value - value
    jg insert_head
    rrmovq %rdi, %rcx # %rcx = temp = head
while:
    mrmovq 8(%rcx), %r8 # %r8 = temp->next
    andq %r8, %r8
    je break # if temp->next == NULL, break
    mrmovq (%r8), %r9 # %r9 = temp->next->value
    subq %rdx, %r9 # %r9 = temp->next->value - value
    jge break # if temp->next->value >= value, break
    rrmovq %r8, %rcx # %rcx = temp = temp->next
    jmp while
break:
    rmmovq %r8, 8(%rsi) # *(array + 1) = temp->next
    rmmovq %rsi, 8(%rcx) # temp->next = array
    rrmovq %rdi, %rax # return head
    ret
insert_head:
    rmmovq %rdi, 8(%rsi)
    rrmovq %rsi, %rax
    ret


.pos 0x200
ele0:
    .quad 0x0005
    .quad ele1
ele1:
    .quad 0x000c
    .quad ele2
ele2:
    .quad 0x0010
    .quad ele3
ele3:
    .quad 0x001a
    .quad ele4
ele4:
    .quad 0x0030
    .quad ele5
ele5:
    .quad 0x0045
    .quad ele6
ele6:
    .quad 0x005e
    .quad 0 # Remember that 0 is null.
.pos 0x400
array:
    .quad 0
    .quad 0

.pos 0x500
stack:
